CREATE TABLE user (
    user_id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    birthdate DATE NOT NULL,
    gender ENUM('male', 'female') NOT NULL,
    status_user ENUM('regular', 'premium') NOT NULL,
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL,
    PRIMARY KEY (user_id)
);
CREATE TABLE product (
    product_id INT NOT NULL AUTO_INCREMENT,
    product_name VARCHAR(255) NOT NULL,
    product_type VARCHAR(255) NOT NULL,
    operator VARCHAR(255) NOT NULL,
    payment_methods VARCHAR(255) NOT NULL,
    product_description VARCHAR(255) NOT NULL,
    PRIMARY KEY (product_id)
);
CREATE TABLE transaction (
    transaction_id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    transaction_date DATETIME NOT NULL,
    PRIMARY KEY (transaction_id),
    FOREIGN KEY (user_id) REFERENCES user (user_id),
    FOREIGN KEY (product_id) REFERENCES product (product_id)
);
CREATE TABLE transaction_detail (
    transaction_detail_id INT NOT NULL AUTO_INCREMENT,
    transaction_id INT NOT NULL,
    price INT NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (transaction_detail_id),
    FOREIGN KEY (transaction_id) REFERENCES transaction (transaction_id)
);
CREATE TABLE payment_method (
    payment_method_id INT NOT NULL AUTO_INCREMENT,
    payment_method_name VARCHAR(255) NOT NULL,
    PRIMARY KEY (payment_method_id)
);
CREATE TABLE user_address (
    user_address_id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    address VARCHAR(255) NOT NULL,
    PRIMARY KEY (user_address_id),
    FOREIGN KEY (user_id) REFERENCES user (user_id)
);
CREATE TABLE user_payment_method_detail (
    user_id INT NOT NULL,
    payment_method_id INT NOT NULL,
    PRIMARY KEY (user_id, payment_method_id),
    FOREIGN KEY (user_id) REFERENCES user (user_id),
    FOREIGN KEY (payment_method_id) REFERENCES payment_method (payment_method_id)
);
CREATE TABLE payment_method_description (
    payment_method_id INT NOT NULL,
    description VARCHAR(255) NOT NULL,
    PRIMARY KEY (payment_method_id),
    FOREIGN KEY (payment_method_id) REFERENCES payment_method (payment_method_id)
);
CREATE TABLE kurir (
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL,
    PRIMARY KEY (id)
);
ALTER TABLE kurir
ADD ongkos_dasar INT NOT NULL DEFAULT 0;

ALTER TABLE kurir
RENAME TO shipping;

DROP TABLE shipping;
CREATE TABLE payment_method_description (
  id INT AUTO_INCREMENT PRIMARY KEY,
  payment_method_id INT,
  description VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (payment_method_id) REFERENCES payment_method(id)
);
CREATE TABLE operators (
  id INT AUTO_INCREMENT PRIMARY KEY,
  operator_name VARCHAR(255)
);









